/* tslint:disable */
/* eslint-disable */
/**
 * openspecapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseEntity
 */
export interface BaseEntity {
    /**
     * 
     * @type {any}
     * @memberof BaseEntity
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof BaseEntity
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof BaseEntity
     */
    'updateAt'?: any;
}
/**
 * 
 * @export
 * @interface DeleteRecipes204Response
 */
export interface DeleteRecipes204Response {
    /**
     * 
     * @type {any}
     * @memberof DeleteRecipes204Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface DeleteRecipesIngredientDelete200Response
 */
export interface DeleteRecipesIngredientDelete200Response {
    /**
     * 
     * @type {any}
     * @memberof DeleteRecipesIngredientDelete200Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface DeleteRecipesIngredientDeleteRequest
 */
export interface DeleteRecipesIngredientDeleteRequest {
    /**
     * 
     * @type {any}
     * @memberof DeleteRecipesIngredientDeleteRequest
     */
    'ingredients'?: any;
}
/**
 * 
 * @export
 * @interface GetRecipesFind400Response
 */
export interface GetRecipesFind400Response {
    /**
     * 
     * @type {any}
     * @memberof GetRecipesFind400Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface GetRecipesNutritionInfo200Response
 */
export interface GetRecipesNutritionInfo200Response {
    /**
     * 
     * @type {any}
     * @memberof GetRecipesNutritionInfo200Response
     */
    'message'?: any;
}
/**
 * 
 * @export
 * @interface IngredientEntity
 */
export interface IngredientEntity {
    /**
     * 
     * @type {any}
     * @memberof IngredientEntity
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof IngredientEntity
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof IngredientEntity
     */
    'updatedAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof IngredientEntity
     */
    'ingredientName'?: any;
    /**
     * 
     * @type {any}
     * @memberof IngredientEntity
     */
    'ingredientDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof IngredientEntity
     */
    'ingredientPictureLink'?: any;
}
/**
 * 
 * @export
 * @interface PostIngredientsCreate200Response
 */
export interface PostIngredientsCreate200Response {
    /**
     * 
     * @type {any}
     * @memberof PostIngredientsCreate200Response
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostIngredientsCreate200Response
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostIngredientsCreate200Response
     */
    'updatedAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostIngredientsCreate200Response
     */
    'ingredientName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostIngredientsCreate200Response
     */
    'ingredientDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostIngredientsCreate200Response
     */
    'ingredientPictureLink'?: any;
}
/**
 * 
 * @export
 * @interface PostIngredientsCreateRequest
 */
export interface PostIngredientsCreateRequest {
    /**
     * 
     * @type {any}
     * @memberof PostIngredientsCreateRequest
     */
    'ingredientName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostIngredientsCreateRequest
     */
    'ingredientDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostIngredientsCreateRequest
     */
    'ingredientPictureLink'?: any;
}
/**
 * 
 * @export
 * @interface PostRecipesCreate200Response
 */
export interface PostRecipesCreate200Response {
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreate200Response
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreate200Response
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreate200Response
     */
    'updatedAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreate200Response
     */
    'ingredients'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreate200Response
     */
    'recipeName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreate200Response
     */
    'recipeDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreate200Response
     */
    'recipePictureLink'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreate200Response
     */
    'recipeSteps'?: any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreate200Response
     */
    'recipeRaiting'?: any;
}
/**
 * 
 * @export
 * @interface PostRecipesCreateRequest
 */
export interface PostRecipesCreateRequest {
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreateRequest
     */
    'recipeName': any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreateRequest
     */
    'recipeDescription': any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreateRequest
     */
    'recipePictureLink': any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreateRequest
     */
    'recipeSteps': any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreateRequest
     */
    'recipeRating': any;
    /**
     * 
     * @type {any}
     * @memberof PostRecipesCreateRequest
     */
    'ingredients': any;
}
/**
 * 
 * @export
 * @interface PutIngredientsIngredientUpdate200Response
 */
export interface PutIngredientsIngredientUpdate200Response {
    /**
     * 
     * @type {any}
     * @memberof PutIngredientsIngredientUpdate200Response
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutIngredientsIngredientUpdate200Response
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutIngredientsIngredientUpdate200Response
     */
    'updatedAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutIngredientsIngredientUpdate200Response
     */
    'ingredientName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutIngredientsIngredientUpdate200Response
     */
    'ingredientDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutIngredientsIngredientUpdate200Response
     */
    'ingredientPictureLink'?: any;
}
/**
 * 
 * @export
 * @interface PutIngredientsIngredientUpdateRequest
 */
export interface PutIngredientsIngredientUpdateRequest {
    /**
     * 
     * @type {any}
     * @memberof PutIngredientsIngredientUpdateRequest
     */
    'ingredientName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutIngredientsIngredientUpdateRequest
     */
    'ingredientDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutIngredientsIngredientUpdateRequest
     */
    'ingredientPictureLink'?: any;
}
/**
 * 
 * @export
 * @interface PutRecipesIngredientAdd200Response
 */
export interface PutRecipesIngredientAdd200Response {
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAdd200Response
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAdd200Response
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAdd200Response
     */
    'updatedAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAdd200Response
     */
    'recipeName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAdd200Response
     */
    'recipeDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAdd200Response
     */
    'recipePictureLink'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAdd200Response
     */
    'recipeSteps'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAdd200Response
     */
    'recipeRaiting'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAdd200Response
     */
    'ingredients'?: any;
}
/**
 * 
 * @export
 * @interface PutRecipesIngredientAddRequest
 */
export interface PutRecipesIngredientAddRequest {
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientAddRequest
     */
    'ingredients'?: any;
}
/**
 * 
 * @export
 * @interface PutRecipesIngredientUpdateRequest
 */
export interface PutRecipesIngredientUpdateRequest {
    /**
     * 
     * @type {any}
     * @memberof PutRecipesIngredientUpdateRequest
     */
    'ingredients'?: any;
}
/**
 * 
 * @export
 * @interface PutRecipesRecipeUpdate200Response
 */
export interface PutRecipesRecipeUpdate200Response {
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdate200Response
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdate200Response
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdate200Response
     */
    'updatedAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdate200Response
     */
    'recipeName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdate200Response
     */
    'recipeDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdate200Response
     */
    'recipePictureLink'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdate200Response
     */
    'recipeSteps'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdate200Response
     */
    'recipeRaiting'?: any;
}
/**
 * 
 * @export
 * @interface PutRecipesRecipeUpdateRequest
 */
export interface PutRecipesRecipeUpdateRequest {
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdateRequest
     */
    'recipeName'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdateRequest
     */
    'recipeDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdateRequest
     */
    'recipePictureLink'?: any;
    /**
     * 
     * @type {any}
     * @memberof PutRecipesRecipeUpdateRequest
     */
    'recipeRating'?: any;
}
/**
 * 
 * @export
 * @interface RecipeEntity
 */
export interface RecipeEntity {
    /**
     * 
     * @type {any}
     * @memberof RecipeEntity
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof RecipeEntity
     */
    'createdAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof RecipeEntity
     */
    'updatedAt'?: any;
    /**
     * 
     * @type {any}
     * @memberof RecipeEntity
     */
    'recipeName'?: any;
    /**
     * 
     * @type {any}
     * @memberof RecipeEntity
     */
    'recipeDescription'?: any;
    /**
     * 
     * @type {any}
     * @memberof RecipeEntity
     */
    'recipePictureLink'?: any;
    /**
     * 
     * @type {any}
     * @memberof RecipeEntity
     */
    'recipeRating'?: any;
    /**
     * 
     * @type {any}
     * @memberof RecipeEntity
     */
    'recipeSteps'?: any;
    /**
     * 
     * @type {RecipeEntityIngredients}
     * @memberof RecipeEntity
     */
    'ingredients'?: RecipeEntityIngredients;
}
/**
 * 
 * @export
 * @interface RecipeEntityIngredients
 */
export interface RecipeEntityIngredients {
    /**
     * 
     * @type {IngredientEntity}
     * @memberof RecipeEntityIngredients
     */
    'ingredient'?: IngredientEntity;
}
/**
 * 
 * @export
 * @interface RecipeIngredientEntity
 */
export interface RecipeIngredientEntity {
    /**
     * 
     * @type {RecipeEntity}
     * @memberof RecipeIngredientEntity
     */
    'recipe'?: RecipeEntity;
    /**
     * 
     * @type {IngredientEntity}
     * @memberof RecipeIngredientEntity
     */
    'ingredient'?: IngredientEntity;
    /**
     * 
     * @type {any}
     * @memberof RecipeIngredientEntity
     */
    'amount'?: any;
    /**
     * 
     * @type {any}
     * @memberof RecipeIngredientEntity
     */
    'unit'?: any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientsIngredientDelete: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIngredientsIngredientDelete', 'id', id)
            const localVarPath = `/ingredients/ingredientDelete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipes: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRecipes', 'id', id)
            const localVarPath = `/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {DeleteRecipesIngredientDeleteRequest} [deleteRecipesIngredientDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipesIngredientDelete: async (id: any, deleteRecipesIngredientDeleteRequest?: DeleteRecipesIngredientDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRecipesIngredientDelete', 'id', id)
            const localVarPath = `/recipes/ingredientDelete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteRecipesIngredientDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsFind: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ingredients/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsFindByName: async (name: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getIngredientsFindByName', 'name', name)
            const localVarPath = `/ingredients/findByName/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesFind: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes/find`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesFindByName: async (name: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getRecipesFindByName', 'name', name)
            const localVarPath = `/recipes/findByName/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesFindRecipeFromIngredient: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRecipesFindRecipeFromIngredient', 'id', id)
            const localVarPath = `/recipes/findRecipeFromIngredient/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} nutrition 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesNutritionInfo: async (nutrition: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nutrition' is not null or undefined
            assertParamExists('getRecipesNutritionInfo', 'nutrition', nutrition)
            const localVarPath = `/recipes/nutritionInfo/{nutrition}`
                .replace(`{${"nutrition"}}`, encodeURIComponent(String(nutrition)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostIngredientsCreateRequest} [postIngredientsCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredientsCreate: async (postIngredientsCreateRequest?: PostIngredientsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ingredients/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postIngredientsCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostRecipesCreateRequest} [postRecipesCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipesCreate: async (postRecipesCreateRequest?: PostRecipesCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRecipesCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutIngredientsIngredientUpdateRequest} [putIngredientsIngredientUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredientsIngredientUpdate: async (id: any, putIngredientsIngredientUpdateRequest?: PutIngredientsIngredientUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putIngredientsIngredientUpdate', 'id', id)
            const localVarPath = `/ingredients/ingredientUpdate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putIngredientsIngredientUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutRecipesIngredientAddRequest} [putRecipesIngredientAddRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesIngredientAdd: async (id: any, putRecipesIngredientAddRequest?: PutRecipesIngredientAddRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putRecipesIngredientAdd', 'id', id)
            const localVarPath = `/recipes/ingredientAdd/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRecipesIngredientAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutRecipesIngredientUpdateRequest} [putRecipesIngredientUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesIngredientUpdate: async (id: any, putRecipesIngredientUpdateRequest?: PutRecipesIngredientUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putRecipesIngredientUpdate', 'id', id)
            const localVarPath = `/recipes/ingredientUpdate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRecipesIngredientUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutRecipesRecipeUpdateRequest} [putRecipesRecipeUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesRecipeUpdate: async (id: any, putRecipesRecipeUpdateRequest?: PutRecipesRecipeUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putRecipesRecipeUpdate', 'id', id)
            const localVarPath = `/recipes/recipeUpdate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putRecipesRecipeUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIngredientsIngredientDelete(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIngredientsIngredientDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipes(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteRecipes204Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipes(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {DeleteRecipesIngredientDeleteRequest} [deleteRecipesIngredientDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecipesIngredientDelete(id: any, deleteRecipesIngredientDeleteRequest?: DeleteRecipesIngredientDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteRecipesIngredientDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecipesIngredientDelete(id, deleteRecipesIngredientDeleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientsFind(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientsFind(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIngredientsFindByName(name: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIngredientsFindByName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesFind(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesFind(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesFindByName(name: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesFindByName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesFindRecipeFromIngredient(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesFindRecipeFromIngredient(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} nutrition 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesNutritionInfo(nutrition: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRecipesNutritionInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesNutritionInfo(nutrition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostIngredientsCreateRequest} [postIngredientsCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIngredientsCreate(postIngredientsCreateRequest?: PostIngredientsCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostIngredientsCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIngredientsCreate(postIngredientsCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PostRecipesCreateRequest} [postRecipesCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRecipesCreate(postRecipesCreateRequest?: PostRecipesCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostRecipesCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRecipesCreate(postRecipesCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutIngredientsIngredientUpdateRequest} [putIngredientsIngredientUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putIngredientsIngredientUpdate(id: any, putIngredientsIngredientUpdateRequest?: PutIngredientsIngredientUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutIngredientsIngredientUpdate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putIngredientsIngredientUpdate(id, putIngredientsIngredientUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutRecipesIngredientAddRequest} [putRecipesIngredientAddRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRecipesIngredientAdd(id: any, putRecipesIngredientAddRequest?: PutRecipesIngredientAddRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRecipesIngredientAdd(id, putRecipesIngredientAddRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutRecipesIngredientUpdateRequest} [putRecipesIngredientUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRecipesIngredientUpdate(id: any, putRecipesIngredientUpdateRequest?: PutRecipesIngredientUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRecipesIngredientUpdate(id, putRecipesIngredientUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutRecipesRecipeUpdateRequest} [putRecipesRecipeUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRecipesRecipeUpdate(id: any, putRecipesRecipeUpdateRequest?: PutRecipesRecipeUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PutRecipesRecipeUpdate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRecipesRecipeUpdate(id, putRecipesRecipeUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIngredientsIngredientDelete(id: any, options?: any): AxiosPromise<any> {
            return localVarFp.deleteIngredientsIngredientDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipes(id: any, options?: any): AxiosPromise<DeleteRecipes204Response> {
            return localVarFp.deleteRecipes(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {DeleteRecipesIngredientDeleteRequest} [deleteRecipesIngredientDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecipesIngredientDelete(id: any, deleteRecipesIngredientDeleteRequest?: DeleteRecipesIngredientDeleteRequest, options?: any): AxiosPromise<DeleteRecipesIngredientDelete200Response> {
            return localVarFp.deleteRecipesIngredientDelete(id, deleteRecipesIngredientDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsFind(options?: any): AxiosPromise<any> {
            return localVarFp.getIngredientsFind(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIngredientsFindByName(name: any, options?: any): AxiosPromise<any> {
            return localVarFp.getIngredientsFindByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesFind(options?: any): AxiosPromise<any> {
            return localVarFp.getRecipesFind(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesFindByName(name: any, options?: any): AxiosPromise<any> {
            return localVarFp.getRecipesFindByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesFindRecipeFromIngredient(id: any, options?: any): AxiosPromise<any> {
            return localVarFp.getRecipesFindRecipeFromIngredient(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {any} nutrition 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesNutritionInfo(nutrition: any, options?: any): AxiosPromise<GetRecipesNutritionInfo200Response> {
            return localVarFp.getRecipesNutritionInfo(nutrition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostIngredientsCreateRequest} [postIngredientsCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIngredientsCreate(postIngredientsCreateRequest?: PostIngredientsCreateRequest, options?: any): AxiosPromise<PostIngredientsCreate200Response> {
            return localVarFp.postIngredientsCreate(postIngredientsCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostRecipesCreateRequest} [postRecipesCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRecipesCreate(postRecipesCreateRequest?: PostRecipesCreateRequest, options?: any): AxiosPromise<PostRecipesCreate200Response> {
            return localVarFp.postRecipesCreate(postRecipesCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutIngredientsIngredientUpdateRequest} [putIngredientsIngredientUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIngredientsIngredientUpdate(id: any, putIngredientsIngredientUpdateRequest?: PutIngredientsIngredientUpdateRequest, options?: any): AxiosPromise<PutIngredientsIngredientUpdate200Response> {
            return localVarFp.putIngredientsIngredientUpdate(id, putIngredientsIngredientUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutRecipesIngredientAddRequest} [putRecipesIngredientAddRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesIngredientAdd(id: any, putRecipesIngredientAddRequest?: PutRecipesIngredientAddRequest, options?: any): AxiosPromise<any> {
            return localVarFp.putRecipesIngredientAdd(id, putRecipesIngredientAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutRecipesIngredientUpdateRequest} [putRecipesIngredientUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesIngredientUpdate(id: any, putRecipesIngredientUpdateRequest?: PutRecipesIngredientUpdateRequest, options?: any): AxiosPromise<any> {
            return localVarFp.putRecipesIngredientUpdate(id, putRecipesIngredientUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {any} id 
         * @param {PutRecipesRecipeUpdateRequest} [putRecipesRecipeUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRecipesRecipeUpdate(id: any, putRecipesRecipeUpdateRequest?: PutRecipesRecipeUpdateRequest, options?: any): AxiosPromise<PutRecipesRecipeUpdate200Response> {
            return localVarFp.putRecipesRecipeUpdate(id, putRecipesRecipeUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIngredientsIngredientDelete(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIngredientsIngredientDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRecipes(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRecipes(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {DeleteRecipesIngredientDeleteRequest} [deleteRecipesIngredientDeleteRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRecipesIngredientDelete(id: any, deleteRecipesIngredientDeleteRequest?: DeleteRecipesIngredientDeleteRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRecipesIngredientDelete(id, deleteRecipesIngredientDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIngredientsFind(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIngredientsFind(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIngredientsFindByName(name: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIngredientsFindByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipesFind(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecipesFind(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipesFindByName(name: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecipesFindByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipesFindRecipeFromIngredient(id: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecipesFindRecipeFromIngredient(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {any} nutrition 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipesNutritionInfo(nutrition: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRecipesNutritionInfo(nutrition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostIngredientsCreateRequest} [postIngredientsCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postIngredientsCreate(postIngredientsCreateRequest?: PostIngredientsCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postIngredientsCreate(postIngredientsCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostRecipesCreateRequest} [postRecipesCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postRecipesCreate(postRecipesCreateRequest?: PostRecipesCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postRecipesCreate(postRecipesCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {PutIngredientsIngredientUpdateRequest} [putIngredientsIngredientUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putIngredientsIngredientUpdate(id: any, putIngredientsIngredientUpdateRequest?: PutIngredientsIngredientUpdateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putIngredientsIngredientUpdate(id, putIngredientsIngredientUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {PutRecipesIngredientAddRequest} [putRecipesIngredientAddRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putRecipesIngredientAdd(id: any, putRecipesIngredientAddRequest?: PutRecipesIngredientAddRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putRecipesIngredientAdd(id, putRecipesIngredientAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {PutRecipesIngredientUpdateRequest} [putRecipesIngredientUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putRecipesIngredientUpdate(id: any, putRecipesIngredientUpdateRequest?: PutRecipesIngredientUpdateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putRecipesIngredientUpdate(id, putRecipesIngredientUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {any} id 
     * @param {PutRecipesRecipeUpdateRequest} [putRecipesRecipeUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putRecipesRecipeUpdate(id: any, putRecipesRecipeUpdateRequest?: PutRecipesRecipeUpdateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putRecipesRecipeUpdate(id, putRecipesRecipeUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


